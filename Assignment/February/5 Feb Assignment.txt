1. Explain Class and Object with respect to Object-Oriented Programming. Give a suitable example.

A- Class creates a user-defined data structure, which holds its own data members and member functions, which can be accessed and used by creating an instance of that class. A class is like a blueprint for an object. An Object is an instance of a Class. A class is like a blueprint while an instance is a copy of the class with actual values. 
Ex- In class Car, Maruti Alto 800 is an object, TATA Tiago is an object, etc


2. Name the four pillars of OOPs

A- The four pillars of OOPS are Inheritance, Polymorphism, Encapsulation and Abstraction.
    a) Abstraction: Abstraction means displaying only basic information and hiding the details. Data abstraction refers to providing only necessary information about the data to the outside world, hiding the background info or implementation.
    b) Encapsulation: Encapsulation is defined as wrapping up of data and information under a single unit. Encapsulation also leads to data abstraction or hiding. Using Encapsulation also hides the data. 
    c) Inheritance: Process in which two classes have a relationship with each other, and objects of one class acquire properties and features of the other class. The class which inherits the features is known as the child class, and the class whose features it inherited is called the parent class.
    d) Polymorphism: It is a feature that provides a function or an operator with more than one definition. An operation may show off different behaviors at different times.


3. Explain why the __init__() function is used. Give a suitable example.

A- The __init__ method lets the class initialize the object's attributes and serves no other purpose. It is only used within classes. The __init__() function is called every time an object is created from a class. 
Ex- Let we are passing student information of the object to the class. The class needs to hold it within. So in order to catch and hold those value we use __init__() function like.. 
    def __init__(self, name, roll):
        self.name=name
        self.roll=roll


4. Why self is used in OOPs?

A- Self is the first argument to be passed in Constructor and Instance Method. Self must be provided as a First parameter to the Instance method and constructor. The self is used to represent the instance of the class. With this keyword, you can access the attributes and methods of the class in python. It binds the attributes with the given arguments.  

5. What is inheritance? Give an example for each type of inheritance

A- It is a mechanism that allows you to create a hierarchy of classes that share a set of properties and methods by deriving a class from another class. Inheritance is the capability of one class to derive or inherit the properties from another class. 
    a) Single inheritance: When a child class inherits from only one parent class.
    b) Multiple inheritances: When a child class inherits from multiple parent classes.
    c) Multilevel inheritance: When we have a child and grandchild relationship. 
    d) Hierarchical inheritance: More than one derived class are created from a single base.
    e) Hybrid inheritance: This form combines more than one form of inheritance. Basically, it is a blend of more than one type of inheritance.